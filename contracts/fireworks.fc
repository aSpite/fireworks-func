#include "imports/stdlib.fc";

;; CONSTS
const int ONE_TON = 1000000000;

;; OP CODES
const op::launch_first = "op::launch_first"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case
const op::launch_second = "op::launch_second"c;
const op::set_first = "op::set_first"c;

;; COMMENTS
const slice comment_msg_0 = "send mode = 0";
const slice comment_msg_1 = "send mode = 1";
const slice comment_msg_2 = "send mode = 2";
const slice comment_msg_32+128 = "send mode = 32 + 128";
const slice comment_msg_64 = "send_mode = 64";


() send_message(int value, int mode, slice comment, slice destination) impure inline {

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(destination)
        .store_coins(value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(comment)
        .end_cell();

    send_raw_message(msg, mode);
}


() save_data(slice address, int id) impure inline {

    cell data = begin_cell()
            .store_slice(address)
            .store_int(id, 32)
            .end_cell();

    set_data(data);
}


;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    if (my_balance < ONE_TON)
            {
                throw(401); ;; not enough balance
            }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    ;;int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::set_first) {

        cell state_init = in_msg_body~load_ref();

        slice pre_msg_1 = begin_cell()
                .store_uint(0x6efe144b, 32) ;; set op code launch_first
                .end_cell()
                .begin_parse();

        int state_init_hash = cell_hash(state_init);
        slice dest_address = begin_cell().store_int(0, 8).store_uint(state_init_hash, 256).end_cell().begin_parse();

        cell msg_1 = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(dest_address)
        .store_coins(ONE_TON)
        .store_uint(0, 1 + 4 + 4 + 64 + 32)
        .store_uint(1,1)                ;;  state_init - true
        .store_uint(1, 1)               ;;  state_init stored in ref
        .store_ref(state_init)
        .store_uint(0,1 )               ;;  msg body stored in slice
        .store_uint(0xa2e2c2dc, 32)     ;;  set op code launch_first
        .end_cell();

        send_raw_message(msg_1, 0);

    }

    if (op == op::launch_first) {

        ;; prepare 4 messages

        ;; msg1 - sending 0.1 TON with mode = 0
        send_message(ONE_TON / 10, 0, comment_msg_0, sender_address);

        ;; msg2 - sending 0.1 TON with mode = 1
        send_message(ONE_TON / 10,  1, comment_msg_1,sender_address);

        ;; msg3 - sending 0.1 TON with mode = 2
        send_message(ONE_TON / 10, 2, comment_msg_2,sender_address);

        ;; msg4 - sending 0.1 TON with mode = 2
        send_message(ONE_TON / 10, 128 + 32, comment_msg_32+128,sender_address);

        return ();
    }

    if (op == op::launch_second) {

        ;; prepare a message

        ;; msg1 - sending 0.1 TON with mode = 0
        send_message(ONE_TON / 10, 64, comment_msg_64, sender_address);

        return ();

    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}



int get_id() method_id {

    cell data = get_data();
    slice cdata = data.begin_parse();

    int id = cdata~load_int(32);
    return id;
}
